; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -relocation-model=pic  < %s \
; RUN: | FileCheck %s --check-prefixes=CHECK1
; RUN: llc -march=loongarch64 -relocation-model=pic -disable-tail-calls  < %s \
; RUN: | FileCheck %s --check-prefixes=CHECK2
; RUN: llc -march=loongarch64 -relocation-model=pic -disable-tail-calls=false  < %s \
; RUN: | FileCheck %s --check-prefixes=CHECK3

; Function with attribute #0 = { "disable-tail-calls"="true" }
define i32 @caller1(i32 %a) #0 {
; CHECK1-LABEL: caller1:
; CHECK1:       # %bb.0: # %entry
; CHECK1-NEXT:    addi.d $sp, $sp, -16
; CHECK1-NEXT:    .cfi_def_cfa_offset 16
; CHECK1-NEXT:    st.d $ra, $sp, 8 # 8-byte Folded Spill
; CHECK1-NEXT:    .cfi_offset 1, -8
; CHECK1-NEXT:    bl callee
; CHECK1-NEXT:    ld.d $ra, $sp, 8 # 8-byte Folded Reload
; CHECK1-NEXT:    addi.d $sp, $sp, 16
; CHECK1-NEXT:    jr $ra
;
; CHECK2-LABEL: caller1:
; CHECK2:       # %bb.0: # %entry
; CHECK2-NEXT:    addi.d $sp, $sp, -16
; CHECK2-NEXT:    .cfi_def_cfa_offset 16
; CHECK2-NEXT:    st.d $ra, $sp, 8 # 8-byte Folded Spill
; CHECK2-NEXT:    .cfi_offset 1, -8
; CHECK2-NEXT:    bl callee
; CHECK2-NEXT:    ld.d $ra, $sp, 8 # 8-byte Folded Reload
; CHECK2-NEXT:    addi.d $sp, $sp, 16
; CHECK2-NEXT:    jr $ra
;
; CHECK3-LABEL: caller1:
; CHECK3:       # %bb.0: # %entry
; CHECK3-NEXT:    b callee
entry:
  %call = tail call i32 @callee(i32 %a)
  ret i32 %call
}


; Function with attribute #1 = { "disable-tail-calls"="false" }
define i32 @caller2(i32 %a) #1 {
; CHECK1-LABEL: caller2:
; CHECK1:       # %bb.0: # %entry
; CHECK1-NEXT:    b callee
;
; CHECK2-LABEL: caller2:
; CHECK2:       # %bb.0: # %entry
; CHECK2-NEXT:    addi.d $sp, $sp, -16
; CHECK2-NEXT:    .cfi_def_cfa_offset 16
; CHECK2-NEXT:    st.d $ra, $sp, 8 # 8-byte Folded Spill
; CHECK2-NEXT:    .cfi_offset 1, -8
; CHECK2-NEXT:    bl callee
; CHECK2-NEXT:    ld.d $ra, $sp, 8 # 8-byte Folded Reload
; CHECK2-NEXT:    addi.d $sp, $sp, 16
; CHECK2-NEXT:    jr $ra
;
; CHECK3-LABEL: caller2:
; CHECK3:       # %bb.0: # %entry
; CHECK3-NEXT:    b callee
entry:
  %call = tail call i32 @callee(i32 %a)
  ret i32 %call
}

define i32 @caller3(i32 %a) {
; CHECK1-LABEL: caller3:
; CHECK1:       # %bb.0: # %entry
; CHECK1-NEXT:    b callee
;
; CHECK2-LABEL: caller3:
; CHECK2:       # %bb.0: # %entry
; CHECK2-NEXT:    addi.d $sp, $sp, -16
; CHECK2-NEXT:    .cfi_def_cfa_offset 16
; CHECK2-NEXT:    st.d $ra, $sp, 8 # 8-byte Folded Spill
; CHECK2-NEXT:    .cfi_offset 1, -8
; CHECK2-NEXT:    bl callee
; CHECK2-NEXT:    ld.d $ra, $sp, 8 # 8-byte Folded Reload
; CHECK2-NEXT:    addi.d $sp, $sp, 16
; CHECK2-NEXT:    jr $ra
;
; CHECK3-LABEL: caller3:
; CHECK3:       # %bb.0: # %entry
; CHECK3-NEXT:    b callee
entry:
  %call = tail call i32 @callee(i32 %a)
  ret i32 %call
}

declare i32 @callee(i32)

attributes #0 = { "disable-tail-calls"="true" }
attributes #1 = { "disable-tail-calls"="false" }

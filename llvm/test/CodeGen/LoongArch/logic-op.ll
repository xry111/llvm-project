; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64  < %s | FileCheck %s

define signext i32 @foo32(i32 signext %a) {
; CHECK-LABEL: foo32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sltui $r4, $r4, 1
; CHECK-NEXT:    jr $ra
entry:
  %tobool = icmp eq i32 %a, 0
  %conv = zext i1 %tobool to i32
  ret i32 %conv
}

define i64 @foo(i64 %a) {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sltui $r4, $r4, 1
; CHECK-NEXT:    jr $ra
entry:
  %tobool = icmp eq i64 %a, 0
  %conv = zext i1 %tobool to i64
  ret i64 %conv
}

define i64 @not(i64 %a) {
; CHECK-LABEL: not:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
entry:
  %not = xor i64 %a, -1
  ret i64 %not
}

define i64 @and(i64 %a, i64 %b) {
; CHECK-LABEL: and:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    and $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %and = and i64 %b, %a
  ret i64 %and
}

define i64 @or(i64 %a, i64 %b) {
; CHECK-LABEL: or:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    or $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %or = or i64 %b, %a
  ret i64 %or
}

define i64 @xor(i64 %a, i64 %b) {
; CHECK-LABEL: xor:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xor $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %xor = xor i64 %b, %a
  ret i64 %xor
}

define i64 @nor(i64 %a, i64 %b) {
; CHECK-LABEL: nor:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    nor $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %or = or i64 %b, %a
  %not = xor i64 %or, -1
  ret i64 %not
}

define i64 @andn(i64 %a, i64 %b) {
; CHECK-LABEL: andn:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andn $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %not = xor i64 %b, -1
  %and = and i64 %not, %a
  ret i64 %and
}

define signext i32 @andn32(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: andn32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andn $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %not = xor i32 %b, -1
  %and = and i32 %not, %a
  ret i32 %and
}

define i64 @orn(i64 %a, i64 %b) {
; CHECK-LABEL: orn:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orn $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %not = xor i64 %b, -1
  %or = or i64 %not, %a
  ret i64 %or
}

define signext i32 @orn32(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: orn32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orn $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %not = xor i32 %b, -1
  %or = or i32 %not, %a
  ret i32 %or
}

define signext i32 @and32(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: and32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    and $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %and = and i32 %b, %a
  ret i32 %and
}

define signext i32 @or32(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: or32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    or $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %or = or i32 %b, %a
  ret i32 %or
}

define signext i32 @xor32(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: xor32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xor $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %xor = xor i32 %b, %a
  ret i32 %xor
}

define signext i32 @nor32(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: nor32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    nor $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %or = or i32 %b, %a
  %not = xor i32 %or, -1
  ret i32 %not
}

define signext i32 @not32(i32 signext %a) {
; CHECK-LABEL: not32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
entry:
  %not = xor i32 %a, -1
  ret i32 %not
}


; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -relocation-model=pic < %s | FileCheck %s

@errors = external local_unnamed_addr global i32, align 4

define signext i32 @compare(i8* %x, i8* %y) {
; CHECK-LABEL: compare:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi.d $sp, $sp, -32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    st.d $ra, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 1, -8
; CHECK-NEXT:    .cfi_offset 23, -16
; CHECK-NEXT:    ld.w $r23, $r5, 0
; CHECK-NEXT:    ld.d $r6, $r4, 8
; CHECK-NEXT:    beqz $r23, .LBB0_3
; CHECK-NEXT:  # %bb.1: # %land.lhs.true
; CHECK-NEXT:    ld.w $r4, $r4, 0
; CHECK-NEXT:    st.d $r6, $sp, 8 # 8-byte Folded Spill
; CHECK-NEXT:    ld.d $r5, $sp, 8 # 8-byte Folded Reload
; CHECK-NEXT:    jirl $ra, $r5, 0
; CHECK-NEXT:    ld.d $r6, $sp, 8 # 8-byte Folded Reload
; CHECK-NEXT:    beqz $r4, .LBB0_3
; CHECK-NEXT:  # %bb.2: # %if.then
; CHECK-NEXT:    la.got $r4, errors
; CHECK-NEXT:    # la expanded slot
; CHECK-NEXT:    ld.w $r5, $r4, 0
; CHECK-NEXT:    addi.w $r5, $r5, 1
; CHECK-NEXT:    st.w $r5, $r4, 0
; CHECK-NEXT:  .LBB0_3: # %if.end
; CHECK-NEXT:    slli.w $r4, $r23, 0
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 32
; CHECK-NEXT:    jr $r6
entry:
  %compare = getelementptr inbounds i8, i8* %x, i64 8
  %0 = bitcast i8* %compare to i32 (i32)**
  %1 = load i32 (i32)*, i32 (i32)** %0, align 8
  %elt = bitcast i8* %y to i32*
  %2 = load i32, i32* %elt, align 8
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %elt3 = bitcast i8* %x to i32*
  %3 = load i32, i32* %elt3, align 8
  %call4 = tail call signext i32 %1(i32 signext %3)
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* @errors, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* @errors, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call6 = tail call signext i32 %1(i32 signext %2)
  ret i32 %call6
}

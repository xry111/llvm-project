//===-- LoongArchSubtarget.h - Define Subtarget for the LoongArch -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the LoongArch specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LoongArch_LoongArchSUBTARGET_H
#define LLVM_LIB_TARGET_LoongArch_LoongArchSUBTARGET_H

#include "MCTargetDesc/LoongArchBaseInfo.h"
#include "LoongArchFrameLowering.h"
#include "LoongArchISelLowering.h"
#include "LoongArchInstrInfo.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "llvm/CodeGen/GlobalISel/RegisterBankInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "LoongArchGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class LoongArchSubtarget : public LoongArchGenSubtargetInfo {
  virtual void anchor();
  bool HasStdExtF = false;
  bool HasStdExtD = false;
  bool HasLA64 = false;
  bool EnableRVCHintInstrs = true;
  unsigned XLen = 32;
  unsigned ADD = LoongArch::ADD_W;
  unsigned SUB = LoongArch::SUB_W;
  unsigned SLL = LoongArch::SLL_W;
  unsigned SRA = LoongArch::SRA_W;
  unsigned ADDI = LoongArch::ADDI_W;
  unsigned SLLI = LoongArch::SLLI_W;
  unsigned SRLI = LoongArch::SRLI_W;
  MVT XLenVT = MVT::i32;
  LoongArchABI::ABI TargetABI = LoongArchABI::ABI_Unknown;
  BitVector UserReservedRegister;
  LoongArchFrameLowering FrameLowering;
  LoongArchInstrInfo InstrInfo;
  LoongArchRegisterInfo RegInfo;
  LoongArchTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  LoongArchSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                  StringRef CPU,
                                                  StringRef TuneCPU,
                                                  StringRef FS,
                                                  StringRef ABIName);

public:
  // Initializes the data members to match that of the specified triple.
  LoongArchSubtarget(const Triple &TT, StringRef CPU, StringRef TuneCPU,
                 StringRef FS, StringRef ABIName, const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const LoongArchFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const LoongArchInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const LoongArchRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const LoongArchTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  bool enableMachineScheduler() const override { return true; }
  bool hasStdExtF() const { return HasStdExtF; }
  bool hasStdExtD() const { return HasStdExtD; }
  bool is64Bit() const { return HasLA64; }
  bool enableRVCHintInstrs() const { return EnableRVCHintInstrs; }
  MVT getXLenVT() const { return XLenVT; }
  unsigned getXLen() const { return XLen; }
  unsigned getADD() const { return ADD; }
  unsigned getSUB() const { return SUB; }
  unsigned getSLL() const { return SLL; }
  unsigned getSRA() const { return SRA; }
  unsigned getADDI() const { return ADDI; }
  unsigned getSLLI() const { return SLLI; }
  unsigned getSRLI() const { return SRLI; }
  LoongArchABI::ABI getTargetABI() const { return TargetABI; }
  bool isRegisterReservedByUser(Register i) const {
    assert(i < LoongArch::NUM_TARGET_REGS && "Register out of range");
    return UserReservedRegister[i];
  }

protected:
  // GlobalISel related APIs.
  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<InstructionSelector> InstSelector;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;

public:
  const CallLowering *getCallLowering() const override;
  InstructionSelector *getInstructionSelector() const override;
  const LegalizerInfo *getLegalizerInfo() const override;
  const RegisterBankInfo *getRegBankInfo() const override;
};
} // End llvm namespace

#endif

//=== LoongArchInstPrinter.h - Convert LoongArch MCInst to assembly syntax -*- C++ -*-==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This class prints a LoongArch MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LOONGARCH_INSTPRINTER_LOONGARCHINSTPRINTER_H
#define LLVM_LIB_TARGET_LOONGARCH_INSTPRINTER_LOONGARCHINSTPRINTER_H
#include "llvm/MC/MCInstPrinter.h"

namespace llvm {

namespace LoongArch {
// LoongArch Branch Codes
enum FPBranchCode {
  BRANCH_F,
  BRANCH_T,
  BRANCH_INVALID
};

// LoongArch Condition Codes
enum CondCode {
  FCOND_F = 0x0,
  FCOND_SF,
  FCOND_OLT,
  FCOND_LT,
  FCOND_OEQ,
  FCOND_SEQ,
  FCOND_OLE,
  FCOND_LE,
  FCOND_UN,
  FCOND_NGLE,
  FCOND_ULT,
  FCOND_NGE,
  FCOND_UEQ,
  FCOND_NGL,
  FCOND_ULE,
  FCOND_NGT,
  FCOND_CNE,
  FCOND_SNE,
  FCOND_COR = 0x14,
  FCOND_SOR = 0x15,
  FCOND_CUNE = 0x18,
  FCOND_SUNE = 0x19,

  // To be used with float branch False
  // This conditions have the same mnemonic as the
  // above ones, but are used with a branch False;
  FCOND_T,
  FCOND_UNE,
  FCOND_ST,
  FCOND_UGE,
  FCOND_NLT,
  FCOND_UGT,
  FCOND_NLE,
  FCOND_OR,
  FCOND_GLE,
  FCOND_OGE,
  FCOND_GE,
  FCOND_ONE,
  FCOND_GL,
  FCOND_OGT,
  FCOND_GT
};

const char *LoongArchFCCToString(LoongArch::CondCode CC);
} // end namespace LoongArch

class LoongArchInstPrinter : public MCInstPrinter {
public:
  LoongArchInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                  const MCRegisterInfo &MRI)
    : MCInstPrinter(MAI, MII, MRI) {}

  // Autogenerated by tblgen.
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);

  void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;

  bool printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &OS);
  void printCustomAliasOperand(const MCInst *MI, uint64_t Address,
                               unsigned OpIdx, unsigned PrintMethodIdx,
                               raw_ostream &O);

private:
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printOperand(const MCInst *MI, uint64_t /*Address*/, unsigned OpNum,
                    raw_ostream &O) {
    printOperand(MI, OpNum, O);
  }
  template <unsigned Bits, unsigned Offset = 0>
  void printUImm(const MCInst *MI, int opNum, raw_ostream &O);
  void printMemOperand(const MCInst *MI, int opNum, raw_ostream &O);
  void printMemOperandEA(const MCInst *MI, int opNum, raw_ostream &O);
  void printFCCOperand(const MCInst *MI, int opNum, raw_ostream &O);

  bool printAlias(const char *Str, const MCInst &MI, unsigned OpNo,
                  raw_ostream &OS);
  bool printAlias(const char *Str, const MCInst &MI, unsigned OpNo0,
                  unsigned OpNo1, raw_ostream &OS);
  bool printAlias(const MCInst &MI, raw_ostream &OS);
  void printSaveRestore(const MCInst *MI, raw_ostream &O);
  void printRegisterList(const MCInst *MI, int opNum, raw_ostream &O);
  void printLoadAddr(const MCInst *MI, raw_ostream &O);
};
} // end namespace llvm

#endif
